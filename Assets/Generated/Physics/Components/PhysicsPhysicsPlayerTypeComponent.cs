//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class PhysicsEntity {

    public PhysicsPlayerTypeComponent physicsPlayerType { get { return (PhysicsPlayerTypeComponent)GetComponent(PhysicsComponentsLookup.PhysicsPlayerType); } }
    public bool hasPhysicsPlayerType { get { return HasComponent(PhysicsComponentsLookup.PhysicsPlayerType); } }

    public void AddPhysicsPlayerType(PlayerType newValue) {
        var index = PhysicsComponentsLookup.PhysicsPlayerType;
        var component = (PhysicsPlayerTypeComponent)CreateComponent(index, typeof(PhysicsPlayerTypeComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplacePhysicsPlayerType(PlayerType newValue) {
        var index = PhysicsComponentsLookup.PhysicsPlayerType;
        var component = (PhysicsPlayerTypeComponent)CreateComponent(index, typeof(PhysicsPlayerTypeComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemovePhysicsPlayerType() {
        RemoveComponent(PhysicsComponentsLookup.PhysicsPlayerType);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class PhysicsMatcher {

    static Entitas.IMatcher<PhysicsEntity> _matcherPhysicsPlayerType;

    public static Entitas.IMatcher<PhysicsEntity> PhysicsPlayerType {
        get {
            if (_matcherPhysicsPlayerType == null) {
                var matcher = (Entitas.Matcher<PhysicsEntity>)Entitas.Matcher<PhysicsEntity>.AllOf(PhysicsComponentsLookup.PhysicsPlayerType);
                matcher.componentNames = PhysicsComponentsLookup.componentNames;
                _matcherPhysicsPlayerType = matcher;
            }

            return _matcherPhysicsPlayerType;
        }
    }
}
