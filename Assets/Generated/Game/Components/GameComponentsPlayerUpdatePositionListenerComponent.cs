//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public ComponentsPlayerUpdatePositionListenerComponent componentsPlayerUpdatePositionListener { get { return (ComponentsPlayerUpdatePositionListenerComponent)GetComponent(GameComponentsLookup.ComponentsPlayerUpdatePositionListener); } }
    public bool hasComponentsPlayerUpdatePositionListener { get { return HasComponent(GameComponentsLookup.ComponentsPlayerUpdatePositionListener); } }

    public void AddComponentsPlayerUpdatePositionListener(System.Collections.Generic.List<IComponentsPlayerUpdatePositionListener> newValue) {
        var index = GameComponentsLookup.ComponentsPlayerUpdatePositionListener;
        var component = (ComponentsPlayerUpdatePositionListenerComponent)CreateComponent(index, typeof(ComponentsPlayerUpdatePositionListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceComponentsPlayerUpdatePositionListener(System.Collections.Generic.List<IComponentsPlayerUpdatePositionListener> newValue) {
        var index = GameComponentsLookup.ComponentsPlayerUpdatePositionListener;
        var component = (ComponentsPlayerUpdatePositionListenerComponent)CreateComponent(index, typeof(ComponentsPlayerUpdatePositionListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveComponentsPlayerUpdatePositionListener() {
        RemoveComponent(GameComponentsLookup.ComponentsPlayerUpdatePositionListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherComponentsPlayerUpdatePositionListener;

    public static Entitas.IMatcher<GameEntity> ComponentsPlayerUpdatePositionListener {
        get {
            if (_matcherComponentsPlayerUpdatePositionListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ComponentsPlayerUpdatePositionListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherComponentsPlayerUpdatePositionListener = matcher;
            }

            return _matcherComponentsPlayerUpdatePositionListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddComponentsPlayerUpdatePositionListener(IComponentsPlayerUpdatePositionListener value) {
        var listeners = hasComponentsPlayerUpdatePositionListener
            ? componentsPlayerUpdatePositionListener.value
            : new System.Collections.Generic.List<IComponentsPlayerUpdatePositionListener>();
        listeners.Add(value);
        ReplaceComponentsPlayerUpdatePositionListener(listeners);
    }

    public void RemoveComponentsPlayerUpdatePositionListener(IComponentsPlayerUpdatePositionListener value, bool removeComponentWhenEmpty = true) {
        var listeners = componentsPlayerUpdatePositionListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveComponentsPlayerUpdatePositionListener();
        } else {
            ReplaceComponentsPlayerUpdatePositionListener(listeners);
        }
    }
}
