//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public ComponentsBlockUpdateRotationListenerComponent componentsBlockUpdateRotationListener { get { return (ComponentsBlockUpdateRotationListenerComponent)GetComponent(GameComponentsLookup.ComponentsBlockUpdateRotationListener); } }
    public bool hasComponentsBlockUpdateRotationListener { get { return HasComponent(GameComponentsLookup.ComponentsBlockUpdateRotationListener); } }

    public void AddComponentsBlockUpdateRotationListener(System.Collections.Generic.List<IComponentsBlockUpdateRotationListener> newValue) {
        var index = GameComponentsLookup.ComponentsBlockUpdateRotationListener;
        var component = (ComponentsBlockUpdateRotationListenerComponent)CreateComponent(index, typeof(ComponentsBlockUpdateRotationListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceComponentsBlockUpdateRotationListener(System.Collections.Generic.List<IComponentsBlockUpdateRotationListener> newValue) {
        var index = GameComponentsLookup.ComponentsBlockUpdateRotationListener;
        var component = (ComponentsBlockUpdateRotationListenerComponent)CreateComponent(index, typeof(ComponentsBlockUpdateRotationListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveComponentsBlockUpdateRotationListener() {
        RemoveComponent(GameComponentsLookup.ComponentsBlockUpdateRotationListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherComponentsBlockUpdateRotationListener;

    public static Entitas.IMatcher<GameEntity> ComponentsBlockUpdateRotationListener {
        get {
            if (_matcherComponentsBlockUpdateRotationListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ComponentsBlockUpdateRotationListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherComponentsBlockUpdateRotationListener = matcher;
            }

            return _matcherComponentsBlockUpdateRotationListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddComponentsBlockUpdateRotationListener(IComponentsBlockUpdateRotationListener value) {
        var listeners = hasComponentsBlockUpdateRotationListener
            ? componentsBlockUpdateRotationListener.value
            : new System.Collections.Generic.List<IComponentsBlockUpdateRotationListener>();
        listeners.Add(value);
        ReplaceComponentsBlockUpdateRotationListener(listeners);
    }

    public void RemoveComponentsBlockUpdateRotationListener(IComponentsBlockUpdateRotationListener value, bool removeComponentWhenEmpty = true) {
        var listeners = componentsBlockUpdateRotationListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveComponentsBlockUpdateRotationListener();
        } else {
            ReplaceComponentsBlockUpdateRotationListener(listeners);
        }
    }
}
