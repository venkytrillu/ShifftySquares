//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Components.UpdateRotationComponent componentsUpdateRotation { get { return (Components.UpdateRotationComponent)GetComponent(GameComponentsLookup.ComponentsUpdateRotation); } }
    public bool hasComponentsUpdateRotation { get { return HasComponent(GameComponentsLookup.ComponentsUpdateRotation); } }

    public void AddComponentsUpdateRotation(UnityEngine.Vector3 newValue) {
        var index = GameComponentsLookup.ComponentsUpdateRotation;
        var component = (Components.UpdateRotationComponent)CreateComponent(index, typeof(Components.UpdateRotationComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceComponentsUpdateRotation(UnityEngine.Vector3 newValue) {
        var index = GameComponentsLookup.ComponentsUpdateRotation;
        var component = (Components.UpdateRotationComponent)CreateComponent(index, typeof(Components.UpdateRotationComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveComponentsUpdateRotation() {
        RemoveComponent(GameComponentsLookup.ComponentsUpdateRotation);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherComponentsUpdateRotation;

    public static Entitas.IMatcher<GameEntity> ComponentsUpdateRotation {
        get {
            if (_matcherComponentsUpdateRotation == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ComponentsUpdateRotation);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherComponentsUpdateRotation = matcher;
            }

            return _matcherComponentsUpdateRotation;
        }
    }
}
