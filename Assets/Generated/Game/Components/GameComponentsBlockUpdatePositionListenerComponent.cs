//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public ComponentsBlockUpdatePositionListenerComponent componentsBlockUpdatePositionListener { get { return (ComponentsBlockUpdatePositionListenerComponent)GetComponent(GameComponentsLookup.ComponentsBlockUpdatePositionListener); } }
    public bool hasComponentsBlockUpdatePositionListener { get { return HasComponent(GameComponentsLookup.ComponentsBlockUpdatePositionListener); } }

    public void AddComponentsBlockUpdatePositionListener(System.Collections.Generic.List<IComponentsBlockUpdatePositionListener> newValue) {
        var index = GameComponentsLookup.ComponentsBlockUpdatePositionListener;
        var component = (ComponentsBlockUpdatePositionListenerComponent)CreateComponent(index, typeof(ComponentsBlockUpdatePositionListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceComponentsBlockUpdatePositionListener(System.Collections.Generic.List<IComponentsBlockUpdatePositionListener> newValue) {
        var index = GameComponentsLookup.ComponentsBlockUpdatePositionListener;
        var component = (ComponentsBlockUpdatePositionListenerComponent)CreateComponent(index, typeof(ComponentsBlockUpdatePositionListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveComponentsBlockUpdatePositionListener() {
        RemoveComponent(GameComponentsLookup.ComponentsBlockUpdatePositionListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherComponentsBlockUpdatePositionListener;

    public static Entitas.IMatcher<GameEntity> ComponentsBlockUpdatePositionListener {
        get {
            if (_matcherComponentsBlockUpdatePositionListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ComponentsBlockUpdatePositionListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherComponentsBlockUpdatePositionListener = matcher;
            }

            return _matcherComponentsBlockUpdatePositionListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddComponentsBlockUpdatePositionListener(IComponentsBlockUpdatePositionListener value) {
        var listeners = hasComponentsBlockUpdatePositionListener
            ? componentsBlockUpdatePositionListener.value
            : new System.Collections.Generic.List<IComponentsBlockUpdatePositionListener>();
        listeners.Add(value);
        ReplaceComponentsBlockUpdatePositionListener(listeners);
    }

    public void RemoveComponentsBlockUpdatePositionListener(IComponentsBlockUpdatePositionListener value, bool removeComponentWhenEmpty = true) {
        var listeners = componentsBlockUpdatePositionListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveComponentsBlockUpdatePositionListener();
        } else {
            ReplaceComponentsBlockUpdatePositionListener(listeners);
        }
    }
}
